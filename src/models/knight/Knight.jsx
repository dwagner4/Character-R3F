/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useContext } from "react";
import * as THREE from "three";
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { createMachine, assign } from 'xstate';

import { AppContext } from '../../App.jsx'





export function Knight(props) {
  const { animation, headfollow, cursorfollow, wireframe } = props;

  let animationVariable = animation

  /* Get references to the parent appMachine and the Knight Actor FSM */
  const appActor = AppContext.useActorRef()
  const fsmRef = AppContext.useSelector((state) => state.context.knightRef)








  const group = useRef();
  const { nodes, materials, animations } = useGLTF("models/knightTPose.glb");

  const { animations: runningAnimation } = useFBX("animations/Run.fbx")
  runningAnimation[0].name = "Run";
  // runningAnimation[0].blendMode = THREE.AdditiveAnimationBlendMode;
  const { animations: backrunningAnimation } = useFBX("animations/BackRun.fbx")
  backrunningAnimation[0].name = "BackRun";
  const { animations: jumpAnimation } = useFBX("animations/Jump.fbx")
  jumpAnimation[0].name = "Jump";
  const { animations: impactAnimation } = useFBX("animations/Impact.fbx")
  impactAnimation[0].name = "Impact";
  const { animations: shieldimpactAnimation } = useFBX("animations/ShieldImpact.fbx")
  shieldimpactAnimation[0].name = "ShieldImpact";
  const { animations: shieldblockAnimation } = useFBX("animations/ShieldBlock.fbx")
  shieldblockAnimation[0].name = "ShieldBlock";
  const { animations: shieldturnAnimation } = useFBX("animations/ShieldTurn.fbx")
  shieldturnAnimation[0].name = "ShieldTurn";
  const { animations: slashAnimation } = useFBX("animations/Slash.fbx")
  slashAnimation[0].name = "Slash";
  // slashAnimation[0].blendMode = THREE.AdditiveAnimationBlendMode;
  const { animations: idleAnimation } = useFBX("animations/SwordIdle.fbx")
  idleAnimation[0].name = "Idle";

  const { ref, mixer, names, actions, clips } = useAnimations([
    idleAnimation[0],
    runningAnimation[0],
    backrunningAnimation[0],
    jumpAnimation[0],
    impactAnimation[0],
    shieldimpactAnimation[0],
    shieldblockAnimation[0],
    shieldturnAnimation[0],
    slashAnimation[0]
  ],
    group);

  console.log(clips)

  useFrame((state, delta) => {
    if (headfollow) {
      group.current.getObjectByName("mixamorigHead").lookAt(state.camera.position);
    }
    if (cursorfollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1)
      group.current.getObjectByName("mixamorigSpine2").lookAt(target);
    }
    if (fsmRef.state.context.turnLeft) {
      console.log("WTF")
      group.current.rotation.z += delta * 1
    }
    if (fsmRef.state.context.turnRight) {
      group.current.rotation.z -= delta * 1
    }
    if (fsmRef.state.context.speed != 0) {
      group.current.position.x += delta * fsmRef.state.context.speed
    }
    // console.log(fsmRef.state.context)
  })

  useEffect(() => {
    const aaa = fsmRef.state.animationName || 'Idle'
    actions[aaa].reset().fadeIn(0.5).play();
    return () => {
      actions[aaa].reset().fadeOut(0.5)
    }
  }, [fsmRef.state.animationName])

  useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
    })
  }, [wireframe])

  return (
    <group ref={group} {...props} rotation-x={-Math.PI / 2} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <skinnedMesh
            name="Paladin_J_Nordstrom"
            geometry={nodes.Paladin_J_Nordstrom.geometry}
            material={materials.Paladin_MAT}
            skeleton={nodes.Paladin_J_Nordstrom.skeleton}
          />
          <skinnedMesh
            name="Paladin_J_Nordstrom_Helmet"
            geometry={nodes.Paladin_J_Nordstrom_Helmet.geometry}
            material={materials.Paladin_MAT}
            skeleton={nodes.Paladin_J_Nordstrom_Helmet.skeleton}
          />
          <skinnedMesh
            name="Paladin_J_Nordstrom_Shield"
            geometry={nodes.Paladin_J_Nordstrom_Shield.geometry}
            material={materials.Paladin_MAT}
            skeleton={nodes.Paladin_J_Nordstrom_Shield.skeleton}
          />
          <skinnedMesh
            name="Paladin_J_Nordstrom_Sword"
            geometry={nodes.Paladin_J_Nordstrom_Sword.geometry}
            material={materials.Paladin_MAT}
            skeleton={nodes.Paladin_J_Nordstrom_Sword.skeleton}
          />
          <primitive object={nodes.mixamorigHips} />
        </group>
      </group>
    </group>
  );
}

export const knightLogic = {
  "id": "knight",
  "initial": "idle",
  "context": {
    keys: {},
    turnLeft: false,
    turnRight: false,
    walk: false,
    jump: false,
    animationName: 'Idle',
    direction: {},
    speed: 0
  },
  "states": {
    "idle": {
      entry: { actions: ["logit"] },
      on: {
        "WALK": { target: "walk" },
        "STRIKE": { target: "strike" },
      }
    },
    "walk": {
      entry: { actions: ["logit"] },
      on: {
        "RUN": { target: "run" },
        "IDLE": { target: "idle" },
      }
    },
    "run": {
      entry: { actions: ["logit"] },
      on: {
        "WALK": { target: "walk" },
      }
    },
    "strike": {
      entry: { actions: ["logit"] },
      on: {
        "IDLE": { target: "idle" },
      }
    },
  },
  on: {
    'KEYBOARD': {
      actions: [
        assign((context, event) => {
          const a = event.data.KeyA
          const d = event.data.KeyD
          const w = event.data.KeyW
          const s = event.data.KeyS
          const ss = w - s
          console.log(event.data, context)
          return {
            turnLeft: a,
            turnRight: d,
            speed: ss,
          }
        })
      ],
    },
    'INIT': {
      actions: [
        assign((context, event) => {
          console.log(event)
          return {
            animationName: event.name
          }
        })
      ]
    }
  },
  "predictableActionArguments": true,
  "preserveActionOrder": true
}

export const knightFunctions = {
  actions: {
    "logit": (context, event) => {
      console.log(context, event)
    },
  },
  services: {},
  guards: {},
  delays: {},
}


useGLTF.preload("models/knightTPose.glb");